--[[
  description:按钮。
  author:wp_g4
  date:2011/04/21
--]]

--类结构定义
clsUITextArea={}
setmetatable(clsUITextArea,clsUILayer)
clsUITextArea.__index=clsUITextArea

--字段
clsUITextArea.REGEX="<.->%[.-%]"          			--功能正则表达式

clsUITextArea.TYPE_AUTOPAGING=0						--文本区域类型：自动分页
clsUITextArea.TYPE_AUTOHEIGHT=1						--文本区域类型：自动高度

clsUITextArea.type=clsUITextArea.TYPE_AUTOPAGING	--文本区域类型,默认为自动分页
clsUITextArea.text=nil                      		--标签文字
clsUITextArea.textColor="0xffffffff"      			--文字颜色
clsUITextArea.textSize=12                   		--文字大小
clsUITextArea.gap=4									--间距

clsUITextArea.textImage=nil							--用于显示文本的图片
clsUITextArea.textItemList=nil						--多行文本数组
clsUITextArea.cursorX=0								--当前要绘制的字符在图片上的位置x
clsUITextArea.cursorY=0								--当前要绘制的字符在图片上的位置y
clsUITextArea.rowNum=0				 				--当前已绘制的行数

--构造器
function clsUITextArea:new(x,y,width,height)
  local self = clsUILayer:new(x,y,width,height)
  setmetatable(self,clsUITextArea)
  return self
end

--更新TextArea
function clsUITextArea:refresh()
  --(1)拆分字符串
  self.textItemList=string.split(self.text,clsUITextArea.REGEX)
  --(2)创建足够大的缓冲图并初始化
  local num=table.getn(self.textItemList)
  local width,height=self.width,num*self.textSize+(num+1)*self.gap
  self.textImage=smImageFactory:createImage(width,height)
  local painter=self.textImage:getPainter()
  painter:setColor(self.textColor)
  painter:setTextSize(self.textSize)
  --(3)重置辅助标志
  local rowIndex,colIndex=1,1    --当前正在绘制的字符在textItemList中的位置
  self.cursorX,self.cursorY=self.gap,self.gap
  self.rowNum=0
  --(4)绘制
  while rowIndex<=num do
    local text=self.textItemList[rowIndex]  --取当前行文本
    if string.find(text,clsUITextArea.REGEX) then
      --功能字符串
      self:parseString(text,painter)
    else
      while colIndex<=smString:length(text) do
        local char=smString:subString(text,colIndex,colIndex)
        --(a)检查是否需要换行
        if self.cursorX+painter:stringWidth(char)>width-2*self.gap then
          self.cursorX=0
          self.cursorY=self.cursorY+self.textSize+self.gap
          self.rowNum=self.rowNum+1
        end
        painter:drawString(char, self.cursorX, self.cursorY, UIConst.anchor.LT)
        self.cursorX=self.cursorX+painter:stringWidth(char)
        colIndex=colIndex+1
      end
      colIndex=1
    end
    rowIndex=rowIndex+1
  end
  --(5)修正图片大小
  num=self.rowNum+1 --图片上的文本行数
  height=num*self.textSize+(num+1)*self.gap
  self.textImage=self.textImage:clip(0,0,width,height)
  --(6)根据类型确定表现
  if self.type==clsUITextArea.TYPE_AUTOPAGING then
    --自动分页
  else
    --自动高度
    self.height=height
    self.image=self.textImage
  end
end

--解析功能字符串  <...>[...]
-- <c>[0xffaabbcc] <n>[1]
function clsUITextArea:parseString(text,painter)
  local items=string.split(text,">%[")
  local len=smString:length(items[1])
  local funStr=smString:subString(items[1],2,len)
  len=smString:length(items[3])
  local argStr=smString:subString(items[3],1,len-1)
  if funStr=="c" then
    painter:setColor(argStr)
  elseif funStr=="n" then
    self.cursorX=0
    for i=1,argStr do
      self.cursorY=self.cursorY+self.textSize+self.gap
      self.rowNum=self.rowNum+1
    end
  end
end

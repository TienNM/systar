--[[
  description:按钮。
  author:wp_g4
  date:2011/04/21
--]]

--类结构定义
clsUILabel={}
setmetatable(clsUILabel,clsUILayer)
clsUILabel.__index=clsUILabel

--重定向父类paintLayer(painter)方法
clsUILabel.paintLayerF=clsUILabel.paintLayer

--字段
clsUILabel.REGEX="<.->%[.-%]"                  	--功能正则表达式

clsUILabel.ALIGN_LEFT=0                         --左对齐
clsUILabel.ALIGN_CENTER=1                       --居中
clsUILabel.ALIGN_RIGHT=2                        --右对齐

clsUILabel.text=nil                             --标签文字
clsUILabel.textColor="0xffffffff"               --文字颜色
clsUILabel.textSize=-1                          --文字大小
clsUILabel.alignment=clsUILabel.ALIGN_LEFT		--对齐方式
clsUILabel.singleLine=true						--是否是单行模式
clsUILabel.gap=4								--间距
clsUILabel.textItemList={}						--多行文本数组

clsUILabel.maxLineNum=1							--多行模式下可以显示的最大行数
clsUILabel.startLineIndex=1						--多行模式下当前显示的第一行的行号
clsUILabel.cursorX=0							--光标X坐标
clsUILabel.cursorY=0							--光标Y坐标

--构造器
function clsUILabel:new(x,y,width,height)
  local self = clsUILayer:new(x,y,width,height)
  setmetatable(self,clsUILabel)
  return self
end

--绘制自身
function clsUILabel:paintLayer(painter)
  --调用父类的paintLayer方法
  self:paintLayerF(painter)
  --绘制文字
  painter:setColor(self.textColor)
  if self.textSize > 0 then
    painter:setTextSize(self.textSize)
  end
  if self.text then
    if self.singleLine then
      --单行模式
      if self.alignment==clsUILabel.ALIGN_LEFT then
        --左对齐
        painter:drawString(self.text, self.gap, self.height/2, UIConst.anchor.LV)
      elseif self.alignment==clsUILabel.ALIGN_LEFT then
        --居中
        painter:drawString(self.text, self.width/2, self.height/2, UIConst.anchor.HV)
      else
        --右对齐
        painter:drawString(self.text, self.width-self.gap, self.height/2, UIConst.anchor.RV)
      end
    else
      --多行自动换行模式
      --(1)计算最大行数
      local textSize=painter:getTextSize()
      self.maxLineNum=math.floor((self.height-2*self.gap)/(textSize+self.gap))
      --(2)重置光标
      self.cursorX,self.cursorY=gap,gap
      --(3)开始绘制
      for i=self.startLineIndex,table.getn(self.textItemList) do
        local text=self.textItemList[i]
        if string.find(text,clsUILabel.REGEX) then
          --功能字符串
          self:parseString(text,painter)
        else
          --显示字符串
          local p=1
          for q=1,smString:length(text) do
            local char=smString:subString(text,q,q)
            --(a)检查是否需要换行
            if self.cursorX+painter:stringWidth(char)>self.width-2*self.gap then
              self.cursorX=0
              self.cursorY=self.cursorY+textSize+self.gap
              p=q
            end
            --(b)绘制
            painter:drawString(char, self.cursorX, self.cursorY, UIConst.anchor.LT)
            self.cursorX=self.cursorX+painter:stringWidth(char)
          end
        end
      end
    end
  end
end

--解析功能字符串  <...>[...]
function clsUILabel:parseString(text,painter)
  print("parseString:"..text)
  local items=string.split(text,">%[")
  local len=smString:length(items[1])
  local funStr=smString:subString(items[1],2,len)
  len=smString:length(items[3])
  local argStr=smString:subString(items[3],1,len-1)
  print("funStr:"..funStr)
  print("argStr:"..argStr)
  if funStr=="c" then
    painter:setColor(argStr)
  elseif funStr=="n" then
  end
end

--重构数据，准备重绘
function clsUILabel:needDisplay()
  if not self.singleLine then
    --多行模式
    self.textItemList=string.split(self.text,clsUILabel.REGEX)
  end
end



--[[
  description:游戏数据管理器 模块定义
  author:wp_g4
  date:2011/12/12
--]]

--[[
   数据结构说明：
   字典类型的数据在游戏过程中不会修改，不需要区分“新游戏”和“加载游戏”；非字典数据在游戏过程中会变化，游戏存档时
需要保存，“新游戏”和“加载游戏”时也不一样。
 1、vocation      字典
 2、player        非字典
 3、skill         字典
 4、item          字典
 5、equip         字典
 6、enemy         非字典（但游戏存档时不需要保存，游戏设计时战斗中不应该有存档）
 7、enemytroop    字典
 8、status        字典
 9、map           字典
 10、npc          非字典
 11、animation    字典
 12、config       字典
--]]


--初始化
GameData={}

--字段
GameData.updateSwitch=false  				--模型更新开关

GameData.playerList=nil						--玩家角色列表
GameData.curPlayer=nil          			--当前角色
GameData.curMap=nil          				--当前地图

GameData.curLockedNpc=nil					--当前锁定的Npc（当执行一个Npc身上的脚本时，Npc即进入锁定状态）

GameData.switchs={}							--游戏开关
GameData.variables={}						--游戏变量

--============Npc相关操作============
--获取指定id的Npc
function GameData:getNpc(id)
  if self.npcs[id]==nil then
    --指定id的Npc不存在
    local npc=clsNpc:new()
    local npcDict=Dictionary.npcs[id]
    npc.id=npcDict.id
    npc.row=npcDict.row
    npc.col=npcDict.col
    npc.name=npcDict.name
    npc.charImgName=npcDict.charImg
    if npc.charImgName then
      npc.charImg=smImageFactory:loadImage(npc.charImgName)
    end
    npc.headImgName=npcDict.headImg
    if npc.headImgName then
      npc.headImg=smImageFactory:loadImage(npc.headImgName)
    end
    npc.face=npcDict.face
    npc.moveType=npcDict.moveType
    npc.speedLevel=npcDict.speedLevel
    npc.penetrable=npcDict.penetrable
    npc.moveDelegate=self
    self.npcs[id]=npc
  end
  return self.npcs[id]
end

--获取指定位置的Npc
function GameData:getNpcAt(row,col)
  local npc=nil
  if self.npcs then
    for k,v in pairs(self.npcs) do
      if v.row==row and v.col==col then
        npc=v
        break
      end 
    end
  end
  return npc
end

--更新游戏模型
function GameData:update()
  if not self.updateSwitch then
    --如果更新开关未开启直接返回
    return
  end
  --更新玩家
  if self.curPlayer then
    self.curPlayer:update()
  end
  --更新当前地图上的Npc
  if self.curMap then
    for k,v in pairs(self.curMap.npcs) do
      local npc=self:getNpc(v)
      npc:update()
    end
  end
end

--检查是否可以继续行走
function GameData:checkCellAfterMove(character)
  local player=self.curPlayer
  local pRow,pCol=player:getHoldingCell()
  local cRow,cCol=character:getHoldingCell()
  --(1)、player移动结束
  if character==player then
    --player踩到Npc，条件：player当前位置有一个可穿透的Npc
    for k,v in pairs(self.curMap.npcs) do
      local npc=self:getNpc(v)
      local nRow,nCol=npc:getHoldingCell()
      if nRow==pRow and nCol==pCol and npc.penetrable then
        smLog:info("玩家踩到Npc")
        self:checkScript(npc)
        return true
      end
    end
  else
  --(2)、npc移动结束
    --Npc走到player脚下，条件：当前移动中的Npc可穿透并且player也在当前位置
    if cRow==pRow and cCol==pCol and character.penetrable then
      smLog:info("Npc走到玩家脚下")
      self:checkScript(character)
      return true
    end
  end
  return true
end

--Npc和玩家接触(碰撞、重叠)后检查脚本
function GameData:checkScript(npc)
  if self.curLockedNpc then
    --当前有脚本在执行则直接返回
    return
  end
  local scriptId=Dictionary.npcs[npc.id].scriptId
  --锁定player
  self.curPlayer.locked=true
  --锁定当前Npc
  npc.locked=true
  self.curLockedNpc=npc  
  Interpreter:runScript(scriptId)
end

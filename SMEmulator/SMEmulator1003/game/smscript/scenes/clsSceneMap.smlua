--[[
  description:地图场景  TODO 重新核对坐标
  author:wp_g4
  date:2011/12/18
--]]

--结构定义
clsSceneMap = {}
setmetatable(clsSceneMap,clsScene)
clsSceneMap.__index = clsSceneMap

--常量:param
clsSceneMap.Param={}
clsSceneMap.Param.HEAD_WIDTH=64  --头像宽度
clsSceneMap.Param.HEAD_HEIGHT=64 --头像高度

--字段
clsSceneMap.menuItems={"属性","背包","技能","队伍","存档","退出"}
clsSceneMap.mapBgLayer=nil     		--背景(尺寸同窗口)
clsSceneMap.mapFgLayer=nil    		--前景（尺寸同窗口）
clsSceneMap.spriteLayer=nil    		--精灵层（尺寸同地图）
clsSceneMap.buttonHead=nil    		--头像按钮
clsSceneMap.menu=nil     	 		--菜单

clsSceneMap.curPlayer=nil     		--当前player
clsSceneMap.aStar=nil      			--A*寻路工具
clsSceneMap.viewport=nil			--视口

--构造器
function clsSceneMap:new()
  local self = clsScene:new()
  setmetatable(self,clsSceneMap)
  local screenWidth,screenHeight=Game:getWidth(),Game:getHeight()
  --背景实例化
  self.mapBgLayer=clsTiled:new(screenWidth/2,screenHeight/2,screenWidth,screenHeight)
  self.mapBgLayer.delegate=self
  GameLayer:addChildToScene(self.mapBgLayer)
  --精灵层实例化
  self.spriteLayer=clsUILayer:new(0,0,screenWidth,screenHeight)
  self.spriteLayer.anchor={0,0}
  self.spriteLayer.enabled=false
  GameLayer:addChildToScene(self.spriteLayer)
  --前景实例化
  self.mapFgLayer=clsTiled:new(screenWidth/2,screenHeight/2,screenWidth,screenHeight)
  self.mapFgLayer.enabled=false
  GameLayer:addChildToScene(self.mapFgLayer)
  --头像
  self.buttonHead=clsUIButton:new(0,0,self.Param.HEAD_WIDTH,self.Param.HEAD_HEIGHT)
  self.buttonHead.anchor={0,0}
  self.buttonHead.delegate=self
  GameLayer:addChildToScene(self.buttonHead)
  --菜单
  local w,h=self.Param.HEAD_WIDTH,200
  self.menu=clsUITable:standardMenu(0,self.Param.HEAD_HEIGHT,w,h,self.menuItems)
  self.menu.anchor={0,0}
  self.menu.delegate=self
  self.menu:refresh()
  self.menu.visibility=false
  GameLayer:addChildToScene(self.menu)
  return self
end

-- 开始
function clsSceneMap:onStart()
  smLog:info("地图场景启动")
  --注册接收通知
  Notifier:addObserver(Const.NotifyCMD.Character.MOVE,self,self.characterMove)
  Notifier:addObserver(Const.NotifyCMD.Character.MOVED,self,self.characterMoved)
  Notifier:addObserver(Const.NotifyCMD.Character.FACE_CHANGED,self,self.characterFaceChanged)
  Notifier:addObserver(Const.NotifyCMD.Character.MAP_CHANGED,self,self.characterMapChanged)

  self.buttonHead.normalImage=GameData.curPlayer.headImg
  self:buildMap()
end

-- 更新
function clsSceneMap:update()
  --smLog:info("地图场景更新")
  --更新视口
  self:updateViewport()
end

-- 退出
function clsSceneMap:onStop()
  smLog:info("地图场景退出")
  smAudioPlayer:stop()
  Notifier:removeObserver(Const.NotifyCMD.Character.MOVE,self)
  Notifier:removeObserver(Const.NotifyCMD.Character.MOVED,self)
  Notifier:removeObserver(Const.NotifyCMD.Character.FACE_CHANGED,self)
  Notifier:removeObserver(Const.NotifyCMD.Character.MAP_CHANGED,self)
end

--切换地图
function clsSceneMap:buildMap()
  GameData.curMap=Dictionary:getMap(GameData.curPlayer.mapId)
  self.aStar=clsAStar:new(GameData.curMap.areas)
  --预加载地图图集
  for _,v in pairs(GameData.curMap.tilesets) do
    smImageFactory:loadImage(v.path)
  end
  --加载背景
  local bgLayers=clsList:new()
  for i=1,table.getn(GameData.curMap.layers) do
    local layer=GameData.curMap.layers[i]
    if layer.deepth<0 then
      bgLayers:add(layer)
    end
  end
  self.viewport=self:checkViewport(self:characherLocation(GameData.curPlayer))
  self.mapBgLayer:init(GameData.curMap.id,bgLayers,self.viewport)
  --精灵层移除所有sprite
  self.spriteLayer:clear()
  --修正精灵层大小
  self.spriteLayer.width=GameData.curMap.cellWidth*GameData.curMap.colNum
  self.spriteLayer.height=GameData.curMap.cellHeight*GameData.curMap.rowNum
    --主角
    local playerSprite=clsSprite:new(GameData.curPlayer.charImg,
       GameData.curPlayer.charImg:getWidth()/4,GameData.curPlayer.charImg:getHeight()/4)
    playerSprite.tag=GameData.curPlayer.id
    playerSprite.delegate=self
    playerSprite.z=GameData.curPlayer.row
    playerSprite.x,playerSprite.y=self:characherLocation(GameData.curPlayer)
    self.spriteLayer:addChild(playerSprite)
    --Npc
    for k,v in pairs(GameData.curMap.npcs) do
      local npc=GameData:getNpc(v)
      local npcSprite=clsSprite:new(npc.charImg,
        npc.charImg:getWidth()/4,npc.charImg:getHeight()/4)
      npcSprite.tag=npc.id
      npcSprite.delegate=self
      npcSprite.z=npc.row
      npcSprite.x,npcSprite.y=self:characherLocation(npc)
      self.spriteLayer:addChild(npcSprite)
    end
  self.spriteLayer:sortChildren()
  self.spriteLayer.x,self.spriteLayer.y=-self.viewport.x,-self.viewport.y
  --加载前景
  local fgLayers=clsList:new()
  for i=1,table.getn(GameData.curMap.layers) do
    local layer=GameData.curMap.layers[i]
    if layer.deepth>0 then
      fgLayers:add(layer)
    end
  end
  if fgLayers:size()>0 then
    self.mapFgLayer.visibility=true
    self.mapFgLayer:init(GameData.curMap.id,fgLayers,self.viewport)
  else
    self.mapFgLayer.visibility=false
  end
end

--地图更新视口
function clsSceneMap:updateViewport()
  --检测viewport是否改变
  local sprite=self.spriteLayer:childWithTag(GameData.curPlayer.id)
  local viewport=self:checkViewport(sprite.x,sprite.y)
  local offsetX=viewport.x-self.viewport.x
  local offsetY=viewport.y-self.viewport.y
  if offsetX~=0 or offsetY~=0 then
    --viewport有变化
    self.viewport=viewport
    --背景移动
    self.mapBgLayer:trackViewport(self.viewport)
    --前景移动
    if self.mapFgLayer.visibility then
      self.mapFgLayer:trackViewport(self.viewport)
    end
    self.spriteLayer.x,self.spriteLayer.y=-self.viewport.x,-self.viewport.y
  end
end

--计算viewport,相机焦点为(x,y)
function clsSceneMap:checkViewport(x,y)
  local px,py=x,y
  local width=Game:getWidth()
  local height=Game:getHeight()
  local vx=px-width/2
  local vy=py-height/2
  if vx<0 then
    vx=0
  end
  if vx>GameData.curMap.colNum*GameData.curMap.cellWidth-width then
    vx=GameData.curMap.colNum*GameData.curMap.cellWidth-width
  end
  if vy<0 then
    vy=0
  end
  if vy>GameData.curMap.rowNum*GameData.curMap.cellHeight-height then
    vy=GameData.curMap.rowNum*GameData.curMap.cellHeight-height
  end
  return {x=vx,y=vy,width=width,height=height}
end

--计算characher当前物理坐标（双脚之间）
function clsSceneMap:characherLocation(character)
  local row,col=character.row,character.col
  local cellWidth,cellHeight=GameData.curMap.cellWidth,GameData.curMap.cellHeight
  return col*cellWidth+cellWidth/2,row*cellHeight+cellHeight
end

--地图点击事件
function clsSceneMap:mapTapped(target,row,col)
  smLog:info("逻辑坐标: row="..row.." col="..col)
  --向player发送移动命令
  --(1)清除原有的行走命令
  GameData.curPlayer.moveSequence:clear()
  --(2)获取寻路起点
  local curRow=GameData.curPlayer.row
  local curCol=GameData.curPlayer.col
  --(3)寻路
  local directions=self.aStar:searchDirection(curRow+1,curCol+1,row,col)
  --(4)设置行走命令(TODO 可优化)
  while directions:size()>0 do
    local direction=directions:poll()
    GameData.curPlayer.moveSequence:offer(direction)
  end
end

--按钮点击的回调
function clsSceneMap:buttonTapped(button)
  if button==self.buttonHead then
    --显示/隐藏菜单
    self.menu.visibility=not self.menu.visibility
  end
end

--菜单点击的回调 {"状态","物品","技能","装备","存档","退出"}
function clsSceneMap:itemSelected(menu,index)
  self.menu.visibility=false
  if index==1 then
    --状态
    local basicInfo=clsBasicInfo:new(GameData.curPlayer)
    GameLayer:addChildToScene(basicInfo)
  elseif index==2 then
    --物品
    local bag=clsBag:new()
    GameLayer:addChildToScene(bag)
  elseif index==3 then
    --技能
  elseif index==4 then
    --装备
  elseif index==5 then
    --存档
  elseif index==6 then
    --退出
    Game:changeScene(Game.SCENE_TITLE)
  end
end

--============处理通知============
--character移动
function clsSceneMap:characterMove(param)
  local character=param.character
  local direction=param.direction
  --目标点
  local row,col=character.row,character.col
  if direction==0 then
    --上
    row=row-1
  elseif direction==1 then
    --下
    row=row+1
  elseif direction==2 then
    --左
    col=col-1
  elseif direction==3 then
    --右
    col=col+1
  else
    --未知方向
    smLog:info("未知的行走方向")
  end
  --越界判断
  if row<0 or row>GameData.curMap.rowNum-1 or col<0 or col>GameData.curMap.colNum-1 then
    character.moveSequence:clear()
    return
  end
  --检查地图通行度
  if GameData.curMap.areas[row+1][col+1]==-1 then
    character.moveSequence:clear()
    return
  end
  --检查碰撞
  if character==GameData.curPlayer then
    --主角行走
    local npc=GameData:getNpcAt(row,col)
    if npc and not npc.penetrable then
      smLog:info("主角撞到Npc")
      --GameData:checkScript(npc)
      return
    else
      --TODO 主角行走
      smLog:info("主角行走")
      character.moving=true
      local sprite=self.spriteLayer:childWithTag(character.id)
      sprite:walk((col-character.col)*GameData.curMap.cellWidth,(row-character.row)*GameData.curMap.cellHeight,1000)
      character.row,character.col=row,col
    end
  else
    --Npc行走
    local npcMovable=true
    if not character.penetrable then
      if row==GameData.curPlayer.row and col==GameData.curPlayer.col then
        smLog:info("Npc撞到主角")
        --GameData:checkScript(character)
        npcMovable=false
      end
      if npcMovable then
        local npc=GameData:getNpcAt(row,col)
        if npc and npc~=character and not npc.penetrable then
          smLog:info("Npc撞到Npc")
          npcMovable=false
        end
      end
    end
    if npcMovable then
      --TODO npc行走
      smLog:info("npc行走")
      character.moving=true
      local sprite=self.spriteLayer:childWithTag(character.id)
      sprite:walk((col-character.col)*GameData.curMap.cellWidth,(row-character.row)*GameData.curMap.cellHeight,1000)
      character.row,character.col=row,col
    end
  end
end

--clsSprite移动结束回调
function clsSceneMap:spriteWalkEnd(sprite)
  if sprite.tag == GameData.curPlayer.id then
    --主角移动结束
    smLog:info("主角停止")
    GameData.curPlayer.moving=false
  else
    --npc移动结束
    local npc=GameData:getNpc(sprite.tag)
    npc.moving=false
  end
end

--character面向改变
function clsSceneMap:characterFaceChanged(param)
  local sprite=self.spriteLayer:childWithTag(param.character.id)  
  sprite.frameIndex=param.character:getCurFrameIndex()
end

--character地图改变
function clsSceneMap:characterMapChanged(param)
  if param.character==GameData.curPlayer then
    self:buildMap()
  end
end

// generated by de.enough.doc2java.Doc2Java (www.enough.de) on Sun Feb 29 19:10:55 CET 2004
package other.javax.javax.microedition;

import java.io.*;

/**
 * This interface defines the capabilities that a datagram connection
 * must have.
 * <p>
 * Reminder: In common with all the other addressing schemes
 * used for I/O in CLDC, the syntax for datagram addressing is not
 * defined in the CLDC Specification. Syntax definition can
 * only be take place at the profile level. The reason for this is
 * that the datagram interface classes of CLDC can be used for
 * implementing various kinds of datagram protocols. Examples
 * include IP and WDP networks as well as infrared beaming
 * protocols used by various PDAs and other devices. All these
 * protocols use very different addressing mechanisms.
 * <p>
 * In the sample implementation provided as part of the CLDC
 * reference implementation, the following addressing scheme
 * is used for UDP datagrams.
 * <p>
 * The parameter string describing the target of a connection
 * in the CLDC reference implementation takes the following form:
 * 
 * <pre>
 * {protocol}://[{host}]:[{port}]
 * </pre>
 * 
 * A datagram connection can be opened in a "client" mode or "server" mode.
 * If the "//{host}" part is missing then the connection  is opened as
 * a "server" (by "server", we mean that a client application initiates
 * communication). When the "//{host}" part is specified, the connection
 * is opened as a "client".
 * <p>
 * Examples:
 * <p>
 * A datagram connection for accepting datagrams<br>
 * datagram://:1234<p>
 * A datagram connection for sending to a server:<br>
 * datagram://123.456.789.12:1234<p>
 * 
 * Note that the port number in "server mode" (unspecified host name) is
 * that of the receiving port. The port number in "client mode" (host name
 * specified) is that of the target port. The reply-to port in both cases
 * is never unspecified. In "server mode", the same port number is used for
 * both receiving and sending. In "client mode", the reply-to port is
 * always dynamically allocated.
 * <p>
 * The allocation of datagram objects is done in a more abstract way
 * than in J2SE.  This is to allow a single platform to support several
 * different datagram interfaces simultaneously. Datagram objects must be
 * allocated by calling the "newDatagram" method of the DatagramConnection
 * object. The resulting object is defined using another interface type
 * called "javax.microedition.io.Datagram".
 * <HR>
 * 
 * 
 * @since CLDC 1.0
 */
public interface DatagramConnection extends Connection
{
	/**
	 * Get the maximum length a datagram can be.
	 * 
	 * @return The maximum length a datagram can be.
	 * @throws IOException - If an I/O error occurs.
	 */
	public int getMaximumLength() throws IOException;

	/**
	 * Get the nominal length of a datagram.
	 * 
	 * @return The nominal length a datagram can be.
	 * @throws IOException - If an I/O error occurs.
	 */
	public int getNominalLength() throws IOException;

	/**
	 * Send a datagram.
	 * 
	 * @param dgram - A datagram.
	 * @throws IOException - If an I/O error occurs.
	 * @throws InterruptedIOException - Timeout or upon closing the connection with outstanding I/O.
	 */
	public void send( Datagram dgram) throws IOException;

	/**
	 * Receive a datagram.
	 * 
	 * @param dgram - A datagram.
	 * @throws IOException - If an I/O error occurs.
	 * @throws InterruptedIOException - Timeout or upon closing the connection with outstanding I/O.
	 */
	public void receive( Datagram dgram) throws IOException;

	/**
	 * Make a new datagram object automatically allocating a buffer.
	 * 
	 * @param size - The length of the buffer to be allocated  for the datagram
	 * @return A new datagram
	 * @throws IOException - If an I/O error occurs.
	 * @throws IllegalArgumentException - if the length is negative or larger than the buffer
	 */
	public Datagram newDatagram(int size) throws IOException;

	/**
	 * Make a new datagram object.
	 * 
	 * @param size - The length of the buffer to be used
	 * @param addr - The I/O address to which the datagram will be sent
	 * @return A new datagram
	 * @throws IOException - If an I/O error occurs.
	 * @throws IllegalArgumentException - if the length is negative or larger than the buffer, or if the address parameter is invalid
	 */
	public Datagram newDatagram(int size, String addr) throws IOException;

	/**
	 * Make a new datagram object.
	 * 
	 * @param buf - The buffer to be used in the datagram
	 * @param size - The length of the buffer to be allocated for the datagram
	 * @return A new datagram
	 * @throws IOException - If an I/O error occurs.
	 * @throws IllegalArgumentException - if the length is negative or larger than the buffer, or if the buffer parameter is invalid
	 */
	public Datagram newDatagram(byte[] buf, int size) throws IOException;

	/**
	 * Make a new datagram object.
	 * 
	 * @param buf - The buffer to be used in the datagram
	 * @param size - The length of the buffer to be used
	 * @param addr - The I/O address to which the datagram will be sent
	 * @return A new datagram
	 * @throws IOException - If an I/O error occurs.
	 * @throws IllegalArgumentException - if the length is negative or larger than the buffer, or if the address or buffer parameters is invalid
	 */
	public Datagram newDatagram(byte[] buf, int size, String addr) throws IOException;

}

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * SpriteEditorDialog.java
 *
 * Created on 2011-6-1, 23:44:17
 */
package com.soyomaker.dialog;

import com.soyomaker.tablemodel.FrameTableModel;
import com.soyomaker.model.animation.Animation;
import com.soyomaker.model.animation.Frame;
import com.soyomaker.model.animation.Picture;
import com.soyomaker.AppData;
import com.soyomaker.listener.FrameListener;
import com.soyomaker.listener.ProjectAnimationChangeListener;
import com.soyomaker.listener.ProjectAnimationChangedEvent;
import com.soyomaker.model.animation.Action;
import com.soyomaker.model.animation.Clip;
import com.soyomaker.tablemodel.ActionTableModel;
import com.soyomaker.util.ImagePreviewer;
import com.soyomaker.util.TileCutter;
import com.soyomaker.widget.JAccordionPane;
import com.soyomaker.widget.HandlePicturePane;
import com.soyomaker.widget.JSnapTipTabbedPane;
import com.soyomaker.widget.ChoosePicturePane;
import com.soyomaker.widget.JInfiniteProgressPanel;
import com.soyomaker.widget.ShowPicturePane;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DragSource;
import java.awt.dnd.DropTarget;
import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.concurrent.Executor;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.SwingConstants;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;

/**
 *
 * @author Administrator
 */
public class SpriteEditorDialog extends javax.swing.JDialog implements ProjectAnimationChangeListener, FrameListener {

    /** Creates new form SpriteEditorDialog
     * @param parent 
     * @param modal 
     */
    public SpriteEditorDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        initialize();
        AppData.getInstance().getCurProject().addProjectAnimationChangeListener(this);
        handleFramePane.addFrameListener(this);
        JScrollPane scrollPane = new JScrollPane(aspp,
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        tabbedPane.add("元件库", scrollPane);
    }
    private JAccordionPane aspp = new JAccordionPane();
    private HashMap<Picture, HandlePicturePane> handlePicturePanes = new HashMap<Picture, HandlePicturePane>();
    private HashMap<Picture, JScrollPane> showPictureScrollPanes = new HashMap<Picture, JScrollPane>();
    private Executor executor = AppData.getInstance().getExecutor();
    private static final Cursor waitCursor = new Cursor(Cursor.WAIT_CURSOR);
    private static final Cursor normalCursor = new Cursor(Cursor.DEFAULT_CURSOR);
    private JInfiniteProgressPanel gGrassPane = new JInfiniteProgressPanel();

    private void initialize() {
        setLocationRelativeTo(null);
        this.setGlassPane(gGrassPane);
    }

    /**
     *
     */
    public void removeProjectChangeListener() {
        AppData.getInstance().getCurProject().removeProjectAnimationChangeListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spriteTabbedPane = new javax.swing.JTabbedPane();
        jPanel7 = new javax.swing.JPanel();
        jSplitPane5 = new javax.swing.JSplitPane();
        jPanel8 = new javax.swing.JPanel();
        jToolBar6 = new javax.swing.JToolBar();
        zoomInPictureButton = new javax.swing.JButton();
        zoomOutPictureButton = new javax.swing.JButton();
        normalPictureButton = new javax.swing.JButton();
        autoCutButton = new javax.swing.JButton();
        handlePictureScrollPane = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        addImageButton = new javax.swing.JButton();
        removeImageButton = new javax.swing.JButton();
        showPictureScrollPane = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jSplitPane6 = new javax.swing.JSplitPane();
        jSplitPane7 = new javax.swing.JSplitPane();
        jPanel4 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        newAniButton = new javax.swing.JButton();
        removeAniButton = new javax.swing.JButton();
        editAniButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        animationTree = new javax.swing.JTree();
        jPanel11 = new javax.swing.JPanel();
        jSplitPane1 = new javax.swing.JSplitPane();
        jPanel2 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        addFrameButton = new javax.swing.JButton();
        removeFrameButton = new javax.swing.JButton();
        editFrameButton = new javax.swing.JButton();
        cloneFrameButton = new javax.swing.JButton();
        upFrameButton = new javax.swing.JButton();
        downFrameButton = new javax.swing.JButton();
        jScrollPane6 = new javax.swing.JScrollPane();
        frameTable = new javax.swing.JTable();
        jPanel3 = new javax.swing.JPanel();
        jToolBar4 = new javax.swing.JToolBar();
        addActionButton = new javax.swing.JButton();
        removeActionButton = new javax.swing.JButton();
        editActionButton = new javax.swing.JButton();
        jScrollPane8 = new javax.swing.JScrollPane();
        actionTable = new javax.swing.JTable();
        jSplitPane9 = new javax.swing.JSplitPane();
        jPanel9 = new javax.swing.JPanel();
        jToolBar5 = new javax.swing.JToolBar();
        moveUpButton = new javax.swing.JButton();
        moveDownButton = new javax.swing.JButton();
        moveTopButton = new javax.swing.JButton();
        moveBottomButton = new javax.swing.JButton();
        hcenterButton = new javax.swing.JButton();
        vcenterButton = new javax.swing.JButton();
        rightAlignButton = new javax.swing.JButton();
        upAlignButton = new javax.swing.JButton();
        leftAlignButton = new javax.swing.JButton();
        downAlignButton = new javax.swing.JButton();
        leftRotate90Button = new javax.swing.JButton();
        rightRotate90Button = new javax.swing.JButton();
        flipHorizontalButton = new javax.swing.JButton();
        flipVerticalButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        handleFramePane = new com.soyomaker.widget.HandleFramePane();
        jToolBar7 = new javax.swing.JToolBar();
        alphaSlider = new javax.swing.JSlider();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        zoomSlider = new javax.swing.JSlider();
        playAnimationButton = new javax.swing.JButton();
        loopCheckBox = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabbedPane = new JSnapTipTabbedPane();
        bottomLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(SpriteEditorDialog.class);
        setTitle(resourceMap.getString("title")); // NOI18N

        spriteTabbedPane.setName("spriteTabbedPane"); // NOI18N
        spriteTabbedPane.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                spriteTabbedPaneStateChanged(evt);
            }
        });

        jPanel7.setName("jPanel7"); // NOI18N

        jSplitPane5.setName("jSplitPane5"); // NOI18N
        jSplitPane5.setOneTouchExpandable(true);

        jPanel8.setName("jPanel8"); // NOI18N

        jToolBar6.setFloatable(false);
        jToolBar6.setRollover(true);
        jToolBar6.setName("jToolBar6"); // NOI18N

        zoomInPictureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/menu_zoomin.png"))); // NOI18N
        zoomInPictureButton.setFocusable(false);
        zoomInPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomInPictureButton.setName("zoomInPictureButton"); // NOI18N
        zoomInPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomInPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInPictureButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(zoomInPictureButton);

        zoomOutPictureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/menu_zoomout.png"))); // NOI18N
        zoomOutPictureButton.setFocusable(false);
        zoomOutPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        zoomOutPictureButton.setName("zoomOutPictureButton"); // NOI18N
        zoomOutPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        zoomOutPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutPictureButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(zoomOutPictureButton);

        normalPictureButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/menu_return.png"))); // NOI18N
        normalPictureButton.setFocusable(false);
        normalPictureButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        normalPictureButton.setName("normalPictureButton"); // NOI18N
        normalPictureButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        normalPictureButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                normalPictureButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(normalPictureButton);

        autoCutButton.setText("自动切块");
        autoCutButton.setFocusable(false);
        autoCutButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        autoCutButton.setName("autoCutButton"); // NOI18N
        autoCutButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        autoCutButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCutButtonActionPerformed(evt);
            }
        });
        jToolBar6.add(autoCutButton);

        handlePictureScrollPane.setName("handlePictureScrollPane"); // NOI18N

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar6, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
            .addComponent(handlePictureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1063, Short.MAX_VALUE)
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jToolBar6, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(handlePictureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE))
        );

        jSplitPane5.setLeftComponent(jPanel8);

        jPanel6.setName("jPanel6"); // NOI18N

        jToolBar1.setFloatable(false);
        jToolBar1.setRollover(true);
        jToolBar1.setName("jToolBar1"); // NOI18N

        addImageButton.setText("添加素材");
        addImageButton.setFocusable(false);
        addImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addImageButton.setName("addImageButton"); // NOI18N
        addImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addImageButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(addImageButton);

        removeImageButton.setText("删除素材");
        removeImageButton.setFocusable(false);
        removeImageButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeImageButton.setName("removeImageButton"); // NOI18N
        removeImageButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeImageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeImageButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(removeImageButton);

        showPictureScrollPane.setName("showPictureScrollPane"); // NOI18N
        picturePane = new com.soyomaker.widget.ChoosePicturePane(this);
        showPictureScrollPane.setViewportView(picturePane);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showPictureScrollPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
            .addComponent(jToolBar1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(showPictureScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 578, Short.MAX_VALUE))
        );

        jSplitPane5.setRightComponent(jPanel6);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 1227, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
        );

        spriteTabbedPane.addTab("素材编辑窗口", jPanel7);

        jPanel1.setName("jPanel1"); // NOI18N

        jSplitPane6.setResizeWeight(0.25);
        jSplitPane6.setName("jSplitPane6"); // NOI18N
        jSplitPane6.setOneTouchExpandable(true);

        jSplitPane7.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane7.setResizeWeight(0.3);
        jSplitPane7.setName("jSplitPane7"); // NOI18N
        jSplitPane7.setOneTouchExpandable(true);

        jPanel4.setName("jPanel4"); // NOI18N

        jToolBar2.setFloatable(false);
        jToolBar2.setRollover(true);
        jToolBar2.setName("jToolBar2"); // NOI18N

        newAniButton.setText("新建动画");
        newAniButton.setFocusable(false);
        newAniButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        newAniButton.setName("newAniButton"); // NOI18N
        newAniButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        newAniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAniButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(newAniButton);

        removeAniButton.setText("删除动画");
        removeAniButton.setFocusable(false);
        removeAniButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeAniButton.setName("removeAniButton"); // NOI18N
        removeAniButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeAniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeAniButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(removeAniButton);

        editAniButton.setText("编辑动画");
        editAniButton.setFocusable(false);
        editAniButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editAniButton.setName("editAniButton"); // NOI18N
        editAniButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editAniButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editAniButtonActionPerformed(evt);
            }
        });
        jToolBar2.add(editAniButton);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        animationTree.setEditable(true);
        animationTree.setName("animationTree"); // NOI18N
        animationTree.setModel(dtm);
        animationTree.addTreeExpansionListener(new javax.swing.event.TreeExpansionListener() {
            public void treeCollapsed(javax.swing.event.TreeExpansionEvent evt) {
                animationTreeTreeCollapsed(evt);
            }
            public void treeExpanded(javax.swing.event.TreeExpansionEvent evt) {
                animationTreeTreeExpanded(evt);
            }
        });
        animationTree.addTreeSelectionListener(new javax.swing.event.TreeSelectionListener() {
            public void valueChanged(javax.swing.event.TreeSelectionEvent evt) {
                animationTreeValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(animationTree);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar2, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jToolBar2, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 115, Short.MAX_VALUE))
        );

        jSplitPane7.setTopComponent(jPanel4);

        jPanel11.setName("jPanel11"); // NOI18N

        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        jSplitPane1.setResizeWeight(0.5);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        jPanel2.setName("jPanel2"); // NOI18N

        jToolBar3.setFloatable(false);
        jToolBar3.setRollover(true);
        jToolBar3.setName("jToolBar3"); // NOI18N

        addFrameButton.setText("添加帧");
        addFrameButton.setFocusable(false);
        addFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addFrameButton.setName("addFrameButton"); // NOI18N
        addFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addFrameButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(addFrameButton);

        removeFrameButton.setText("删除帧");
        removeFrameButton.setFocusable(false);
        removeFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeFrameButton.setName("removeFrameButton"); // NOI18N
        removeFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeFrameButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(removeFrameButton);

        editFrameButton.setText("编辑帧");
        editFrameButton.setFocusable(false);
        editFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editFrameButton.setName("editFrameButton"); // NOI18N
        editFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editFrameButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(editFrameButton);

        cloneFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/copy.png"))); // NOI18N
        cloneFrameButton.setFocusable(false);
        cloneFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cloneFrameButton.setName("cloneFrameButton"); // NOI18N
        cloneFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cloneFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cloneFrameButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(cloneFrameButton);

        upFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/little_up.png"))); // NOI18N
        upFrameButton.setFocusable(false);
        upFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upFrameButton.setName("upFrameButton"); // NOI18N
        upFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        upFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upFrameButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(upFrameButton);

        downFrameButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/little_down.png"))); // NOI18N
        downFrameButton.setFocusable(false);
        downFrameButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downFrameButton.setName("downFrameButton"); // NOI18N
        downFrameButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downFrameButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downFrameButtonActionPerformed(evt);
            }
        });
        jToolBar3.add(downFrameButton);

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        ftm = new FrameTableModel();
        frameTable.setModel(ftm);
        frameTable.setName("frameTable"); // NOI18N
        frameTable.setRowHeight(20);
        frameTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        DefaultTableCellRenderer frameRender = new DefaultTableCellRenderer();
        frameRender.setHorizontalAlignment(SwingConstants.CENTER);
        for(int i = 0;i < frameTable.getColumnCount();i++) {
            frameTable.getColumn(frameTable.getModel().getColumnName(i)) .setCellRenderer(frameRender);
        }
        frameTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                frameTableMouseClicked(evt);
            }
        });
        jScrollPane6.setViewportView(frameTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
            .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
        );

        jSplitPane1.setRightComponent(jPanel2);

        jPanel3.setName("jPanel3"); // NOI18N

        jToolBar4.setFloatable(false);
        jToolBar4.setRollover(true);
        jToolBar4.setName("jToolBar4"); // NOI18N

        addActionButton.setText("添加特效");
        addActionButton.setFocusable(false);
        addActionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        addActionButton.setName("addActionButton"); // NOI18N
        addActionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        addActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addActionButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(addActionButton);

        removeActionButton.setText("删除特效");
        removeActionButton.setFocusable(false);
        removeActionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        removeActionButton.setName("removeActionButton"); // NOI18N
        removeActionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        removeActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeActionButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(removeActionButton);

        editActionButton.setText("编辑特效");
        editActionButton.setFocusable(false);
        editActionButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        editActionButton.setName("editActionButton"); // NOI18N
        editActionButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        editActionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionButtonActionPerformed(evt);
            }
        });
        jToolBar4.add(editActionButton);

        jScrollPane8.setName("jScrollPane8"); // NOI18N

        atm = new ActionTableModel();
        actionTable.setModel(atm);
        actionTable.setName("actionTable"); // NOI18N
        jScrollPane8.setViewportView(actionTable);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar4, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 283, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jToolBar4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 187, Short.MAX_VALUE))
        );

        jSplitPane1.setLeftComponent(jPanel3);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 285, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 454, Short.MAX_VALUE)
        );

        jSplitPane7.setRightComponent(jPanel11);

        jSplitPane6.setLeftComponent(jSplitPane7);

        jSplitPane9.setName("jSplitPane9"); // NOI18N
        jSplitPane9.setOneTouchExpandable(true);

        jPanel9.setName("jPanel9"); // NOI18N

        jToolBar5.setFloatable(false);
        jToolBar5.setRollover(true);
        jToolBar5.setName("jToolBar5"); // NOI18N

        moveUpButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/moveup.png"))); // NOI18N
        moveUpButton.setToolTipText("上移一层");
        moveUpButton.setEnabled(false);
        moveUpButton.setFocusable(false);
        moveUpButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveUpButton.setName("moveUpButton"); // NOI18N
        moveUpButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveUpButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveUpButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(moveUpButton);

        moveDownButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/movedown.png"))); // NOI18N
        moveDownButton.setToolTipText("下移一层");
        moveDownButton.setEnabled(false);
        moveDownButton.setFocusable(false);
        moveDownButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveDownButton.setName("moveDownButton"); // NOI18N
        moveDownButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveDownButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveDownButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(moveDownButton);

        moveTopButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/movetop.jpg"))); // NOI18N
        moveTopButton.setToolTipText("上移到顶层");
        moveTopButton.setEnabled(false);
        moveTopButton.setFocusable(false);
        moveTopButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveTopButton.setName("moveTopButton"); // NOI18N
        moveTopButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveTopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveTopButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(moveTopButton);

        moveBottomButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/resources/movebottom.jpg"))); // NOI18N
        moveBottomButton.setToolTipText("下移到底层");
        moveBottomButton.setEnabled(false);
        moveBottomButton.setFocusable(false);
        moveBottomButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        moveBottomButton.setName("moveBottomButton"); // NOI18N
        moveBottomButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        moveBottomButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveBottomButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(moveBottomButton);

        hcenterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/hcenter.jpg"))); // NOI18N
        hcenterButton.setToolTipText("图块水平对齐中心线");
        hcenterButton.setEnabled(false);
        hcenterButton.setName("hcenterButton"); // NOI18N
        hcenterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hcenterButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(hcenterButton);

        vcenterButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/vcenter.jpg"))); // NOI18N
        vcenterButton.setToolTipText("图块垂直对齐中心线");
        vcenterButton.setEnabled(false);
        vcenterButton.setFocusable(false);
        vcenterButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        vcenterButton.setName("vcenterButton"); // NOI18N
        vcenterButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        vcenterButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                vcenterButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(vcenterButton);

        rightAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/alighleft.jpg"))); // NOI18N
        rightAlignButton.setToolTipText("图块右边对齐中心线");
        rightAlignButton.setEnabled(false);
        rightAlignButton.setFocusable(false);
        rightAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rightAlignButton.setName("rightAlignButton"); // NOI18N
        rightAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rightAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(rightAlignButton);

        upAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/aligntop.jpg"))); // NOI18N
        upAlignButton.setToolTipText("图块上边对齐中心线");
        upAlignButton.setEnabled(false);
        upAlignButton.setFocusable(false);
        upAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        upAlignButton.setName("upAlignButton"); // NOI18N
        upAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        upAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                upAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(upAlignButton);

        leftAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/alignright.jpg"))); // NOI18N
        leftAlignButton.setToolTipText("图块左边对齐中心线");
        leftAlignButton.setEnabled(false);
        leftAlignButton.setFocusable(false);
        leftAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        leftAlignButton.setName("leftAlignButton"); // NOI18N
        leftAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        leftAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(leftAlignButton);

        downAlignButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/alighbottom.jpg"))); // NOI18N
        downAlignButton.setToolTipText("图块下边对齐中心线");
        downAlignButton.setEnabled(false);
        downAlignButton.setFocusable(false);
        downAlignButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        downAlignButton.setName("downAlignButton"); // NOI18N
        downAlignButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        downAlignButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                downAlignButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(downAlignButton);

        leftRotate90Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/rotateleft.jpg"))); // NOI18N
        leftRotate90Button.setToolTipText("图块左旋90度"); // NOI18N
        leftRotate90Button.setEnabled(false);
        leftRotate90Button.setFocusable(false);
        leftRotate90Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        leftRotate90Button.setName("leftRotate90Button"); // NOI18N
        leftRotate90Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        leftRotate90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                leftRotate90ButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(leftRotate90Button);

        rightRotate90Button.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/rotateright.jpg"))); // NOI18N
        rightRotate90Button.setToolTipText("图块右旋90度"); // NOI18N
        rightRotate90Button.setEnabled(false);
        rightRotate90Button.setFocusable(false);
        rightRotate90Button.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        rightRotate90Button.setName("rightRotate90Button"); // NOI18N
        rightRotate90Button.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        rightRotate90Button.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rightRotate90ButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(rightRotate90Button);

        flipHorizontalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/hmirror.jpg"))); // NOI18N
        flipHorizontalButton.setToolTipText("图块水平翻转");
        flipHorizontalButton.setEnabled(false);
        flipHorizontalButton.setFocusable(false);
        flipHorizontalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flipHorizontalButton.setName("flipHorizontalButton"); // NOI18N
        flipHorizontalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flipHorizontalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipHorizontalButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(flipHorizontalButton);

        flipVerticalButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/com/soyomaker/dialog/resources/vmirror.jpg"))); // NOI18N
        flipVerticalButton.setToolTipText("图块垂直翻转");
        flipVerticalButton.setEnabled(false);
        flipVerticalButton.setFocusable(false);
        flipVerticalButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        flipVerticalButton.setName("flipVerticalButton"); // NOI18N
        flipVerticalButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        flipVerticalButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                flipVerticalButtonActionPerformed(evt);
            }
        });
        jToolBar5.add(flipVerticalButton);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        handleFramePane.setName("handleFramePane"); // NOI18N

        javax.swing.GroupLayout handleFramePaneLayout = new javax.swing.GroupLayout(handleFramePane);
        handleFramePane.setLayout(handleFramePaneLayout);
        handleFramePaneLayout.setHorizontalGroup(
            handleFramePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        handleFramePaneLayout.setVerticalGroup(
            handleFramePaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        jScrollPane1.setViewportView(handleFramePane);

        jToolBar7.setFloatable(false);
        jToolBar7.setRollover(true);
        jToolBar7.setName("jToolBar7"); // NOI18N

        alphaSlider.setMaximum(255);
        alphaSlider.setValue(0);
        alphaSlider.setEnabled(false);
        alphaSlider.setName("alphaSlider"); // NOI18N
        alphaSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                alphaSliderStateChanged(evt);
            }
        });

        jLabel1.setText("透明度");
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText("缩放比");
        jLabel2.setName("jLabel2"); // NOI18N

        zoomSlider.setEnabled(false);
        zoomSlider.setName("zoomSlider"); // NOI18N
        zoomSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                zoomSliderStateChanged(evt);
            }
        });

        playAnimationButton.setText("播放");
        playAnimationButton.setFocusable(false);
        playAnimationButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        playAnimationButton.setName("playAnimationButton"); // NOI18N
        playAnimationButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        playAnimationButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playAnimationButtonActionPerformed(evt);
            }
        });

        loopCheckBox.setSelected(true);
        loopCheckBox.setText("循环");
        loopCheckBox.setFocusable(false);
        loopCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        loopCheckBox.setName("loopCheckBox"); // NOI18N
        loopCheckBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jToolBar5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(playAnimationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addComponent(loopCheckBox)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel2))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(alphaSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE)
                            .addComponent(zoomSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 44, Short.MAX_VALUE)
                .addComponent(jToolBar7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 591, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jToolBar7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(zoomSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(alphaSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(playAnimationButton, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(loopCheckBox)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 506, Short.MAX_VALUE))
        );

        jSplitPane9.setLeftComponent(jPanel9);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tabbedPane.setName("tabbedPane"); // NOI18N
        jScrollPane2.setViewportView(tabbedPane);

        jSplitPane9.setRightComponent(jScrollPane2);

        jSplitPane6.setRightComponent(jSplitPane9);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 1227, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane6, javax.swing.GroupLayout.DEFAULT_SIZE, 609, Short.MAX_VALUE)
        );

        spriteTabbedPane.addTab("动画编辑窗口", jPanel1);

        bottomLabel.setText("按住Shift再拖动可改变切块大小");
        bottomLabel.setName("bottomLabel"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(bottomLabel)
                .addContainerGap(1048, Short.MAX_VALUE))
            .addComponent(spriteTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 1232, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(spriteTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bottomLabel))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addImageButtonActionPerformed
        // TODO add your handling code here:
        JFileChooser ch = new JFileChooser(AppData.getInstance().getCurProject().getPath() + File.separatorChar + "image" + File.separatorChar + "animation");
        // 设置文件选取器
        ImagePreviewer imagePreviewer = new ImagePreviewer(ch);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("PNG or JPG Images", "png", "jpg");
        ch.setAccessory(imagePreviewer);
        ch.addChoosableFileFilter(filter);
        ch.setAcceptAllFileFilterUsed(false);
        ch.setMultiSelectionEnabled(true);
        int ret = ch.showOpenDialog(this);
        if (ret == JFileChooser.APPROVE_OPTION) {
            final File[] files = ch.getSelectedFiles();
            Runnable task = new Runnable() {

                @Override
                public void run() {
                    SpriteEditorDialog.this.setCursor(waitCursor);
                    SpriteEditorDialog.this.gGrassPane.start();
                    SpriteEditorDialog.this.gGrassPane.setText("正在加载可用图像文件...");
                    for (int i = 0; i < files.length; i++) {
                        Picture pic = new Picture();
                        try {
                            pic.setSourceImageFile(files[i].getName());
                        } catch (IOException ex) {
                            System.out.println("不支持的图像文件:" + files[i].getPath());
                        }
                        AppData.getInstance().getCurProject().addPicture(pic);
                    }
                    SpriteEditorDialog.this.gGrassPane.setText("加载图像文件完毕");
                    SpriteEditorDialog.this.gGrassPane.stop();
                    SpriteEditorDialog.this.setCursor(normalCursor);
                }
            };
            executor.execute(task);
        }
    }//GEN-LAST:event_addImageButtonActionPerformed

    /**
     *
     * @return
     */
    public HashMap<Picture, HandlePicturePane> getHandlePicturePanes() {
        return handlePicturePanes;
    }
    private void zoomInPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInPictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        handlePicturePanes.get(picturePane.getSelectedPicture()).zoomIn();
}//GEN-LAST:event_zoomInPictureButtonActionPerformed

    private void zoomOutPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutPictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        handlePicturePanes.get(picturePane.getSelectedPicture()).zoomOut();
}//GEN-LAST:event_zoomOutPictureButtonActionPerformed

    private void normalPictureButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_normalPictureButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        handlePicturePanes.get(picturePane.getSelectedPicture()).setZoomLevel(HandlePicturePane.ZOOM_NORMALSIZE);
}//GEN-LAST:event_normalPictureButtonActionPerformed

    private void removeImageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeImageButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        int choose = JOptionPane.showConfirmDialog(this, "素材可能正在使用，你确定要删除吗？", "警告", JOptionPane.OK_CANCEL_OPTION);
        if (choose == JOptionPane.OK_OPTION) {
            AppData.getInstance().getCurProject().removePicture(picturePane.getSelectedIndex());
        }
    }//GEN-LAST:event_removeImageButtonActionPerformed

    private void spriteTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_spriteTabbedPaneStateChanged
        // TODO add your handling code here:
        if (spriteTabbedPane.getSelectedIndex() == 0) {
            bottomLabel.setText("选中切好的图块后，再按住Shift然后拖动可改变切块大小");
        } else {
            bottomLabel.setText("拖动右方元件库中切好的图块拖到中央面板进行拼装");
        }
    }//GEN-LAST:event_spriteTabbedPaneStateChanged

    private void newAniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAniButtonActionPerformed
        // TODO add your handling code here:
        NewAnimationDialog nad = new NewAnimationDialog(this, true);
        nad.setVisible(true);
        if (nad.getAnimation() != null) {
            Animation ani = nad.getAnimation();
            AppData.getInstance().getCurProject().addAnimation(ani);
            Frame frame = new Frame();
            ani.addFrame(frame);
            frame.setDelay(ani.getFrameDelay());
            handleFramePane.setCurFrame(frame);

            AppData.getInstance().setCurrentAnimationIndex(ani.getIndex());
            DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(ani);
            //将新节点插入到指定位置
            if (selectNode == null) {
                ((DefaultMutableTreeNode) dtm.getRoot()).add(newNode);
                dtm.reload((DefaultMutableTreeNode) dtm.getRoot());
            } else {
                selectNode.add(newNode);
                dtm.reload(selectNode);
            }
            animationTree.expandPath(tp);
            animationTree.setSelectionPath(new TreePath(dtm.getPathToRoot(newNode)));
            //设置维持当前的选择路径
            animationTree.setExpandsSelectedPaths(true);
            frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
                    ani.getFrames().size() - 1);
            frameTable.updateUI();
            if (ani.getFrames().size() > 0) {
                handleFramePane.setCurFrame(ani.getFrame(ani.getFrames().size() - 1));
            }
        }
    }//GEN-LAST:event_newAniButtonActionPerformed

    private void removeAniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeAniButtonActionPerformed
        // TODO add your handling code here:
        if (selectNode != null && selectNode.getParent() != null) {
            int id = JOptionPane.showConfirmDialog(this, "你确定要删除该动画吗？", "删除动画", JOptionPane.OK_CANCEL_OPTION);
            if ((id == JOptionPane.OK_OPTION) && (selectNode.getUserObject() instanceof Animation)) {
                dtm.removeNodeFromParent(selectNode);
                removeAllChildrenAnimation(selectNode);
                AppData.getInstance().getCurProject().removeAnimation(((Animation) selectNode.getUserObject()).getIndex());
                AppData.getInstance().setCurrentAnimationIndex(-1);
//                System.out.println("size:" + AppData.getInstance().getCurProject().getAnimationCounts());
                animationTree.getSelectionModel().setSelectionPath(new TreePath(dtm.getRoot()));
                handleFramePane.setCurFrame(null);
                frameTable.getSelectionModel().clearSelection();
                frameTable.updateUI();
            }
        }
    }//GEN-LAST:event_removeAniButtonActionPerformed
    private void removeAllChildrenAnimation(DefaultMutableTreeNode tn) {
        for (int i = 0, n = tn.getChildCount(); i < n; i++) {
            DefaultMutableTreeNode dmt = (DefaultMutableTreeNode) tn.getChildAt(i);
            if (dmt.getChildCount() > 0) {
                removeAllChildrenAnimation(dmt);
            }
            AppData.getInstance().getCurProject().removeAnimation(((Animation) dmt.getUserObject()).getIndex());
        }
    }
    private AppData data = AppData.getInstance();
    private void playAnimationButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playAnimationButtonActionPerformed
        // TODO add your handling code here:
        handleFramePane.playOrPause(loopCheckBox.isSelected());
        if (handleFramePane.isIsPlay()) {
            playAnimationButton.setText("暂停");
        } else {
            playAnimationButton.setText("播放");
        }
    }//GEN-LAST:event_playAnimationButtonActionPerformed

    private void leftRotate90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftRotate90ButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() - 90 >= 0) {
                clip.setRotation(clip.getRotation() - 90);
            } else {
                clip.setRotation(clip.getRotation() - 90 + 360);
            }
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_leftRotate90ButtonActionPerformed

    private void rightRotate90ButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightRotate90ButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() + 90 < 360) {
                clip.setRotation(clip.getRotation() + 90);
            } else {
                clip.setRotation(clip.getRotation() + 90 - 360);
            }
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_rightRotate90ButtonActionPerformed

    private void flipHorizontalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipHorizontalButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() == 90 || clip.getRotation() == 270) {
                if (clip.getRotation() + 180 < 360) {
                    clip.setRotation(clip.getRotation() + 180);
                } else {
                    clip.setRotation(clip.getRotation() + 180 - 360);
                }
            }
            clip.setMirror(!clip.isMirror());
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_flipHorizontalButtonActionPerformed

    private void moveUpButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveUpButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            Frame frame = handleFramePane.getCurFrame();
            int id = frame.getTiles().indexOf(clip);
            if (id < frame.getTiles().size() - 1) {
                frame.swapClipUp(id);
                handleFramePane.setSelectedTileIndex(id + 1);
                handleFramePane.repaint();
            }
        }
    }//GEN-LAST:event_moveUpButtonActionPerformed

    private void moveDownButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveDownButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            Frame frame = handleFramePane.getCurFrame();
            int id = frame.getTiles().indexOf(clip);
            if (id > 0) {
                frame.swapClipDown(id);
                handleFramePane.setSelectedTileIndex(id - 1);
                handleFramePane.repaint();
            }
        }
    }//GEN-LAST:event_moveDownButtonActionPerformed

    private void flipVerticalButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_flipVerticalButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            if (clip.getRotation() == 0 || clip.getRotation() == 180) {
                if (clip.getRotation() + 180 < 360) {
                    clip.setRotation(clip.getRotation() + 180);
                } else {
                    clip.setRotation(clip.getRotation() + 180 - 360);
                }
            }
            clip.setMirror(!clip.isMirror());
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_flipVerticalButtonActionPerformed

    private void vcenterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_vcenterButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
//            clip.getFramePoint().x = 0;
            clip.getFramePoint().y = 0;
            handleFramePane.repaint();
        }
}//GEN-LAST:event_vcenterButtonActionPerformed

    private void rightAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rightAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().x = (int) (-clip.getW() * clip.getZoom() / 2);
            handleFramePane.repaint();
        }
}//GEN-LAST:event_rightAlignButtonActionPerformed

    private void leftAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_leftAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().x = (int) (clip.getW() * clip.getZoom() / 2);
            handleFramePane.repaint();
        }
}//GEN-LAST:event_leftAlignButtonActionPerformed

    private void downAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().y = (int) (-clip.getH() * clip.getZoom() / 2);
            handleFramePane.repaint();
        }
}//GEN-LAST:event_downAlignButtonActionPerformed

    private void upAlignButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upAlignButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().y = (int) (clip.getH() * clip.getZoom() / 2);
            handleFramePane.repaint();
        }
}//GEN-LAST:event_upAlignButtonActionPerformed

    private void alphaSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_alphaSliderStateChanged
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.setTransparency(alphaSlider.getValue());
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_alphaSliderStateChanged

    private void frameTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_frameTableMouseClicked
        // TODO add your handling code here:
        Animation ani = data.getCurrentAnimation();
        if (frameTable.getSelectedRow() < 0 || frameTable.getSelectedRow() > ani.getFrames().size() - 1) {
            return;
        }
        handleFramePane.setCurFrame(ani.getFrame(frameTable.getSelectedRow()));
}//GEN-LAST:event_frameTableMouseClicked

    private void downFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_downFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimation() == null) {
            return;
        }
        Animation ani = data.getCurrentAnimation();
        int frameIndex = ani.getFrames().indexOf(handleFramePane.getCurFrame());
        int totalFrames = ani.getFrames().size();
        if (frameIndex < totalFrames - 1) {
            ani.swapFrameDown(frameIndex);
            frameTable.getSelectionModel().setSelectionInterval(frameIndex + 1,
                    frameIndex + 1);
            handleFramePane.setCurFrame(ani.getFrame(frameTable.getSelectedRow()));
            frameTable.updateUI();
        }
}//GEN-LAST:event_downFrameButtonActionPerformed

    private void upFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_upFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimation() == null) {
            return;
        }
        Animation ani = data.getCurrentAnimation();
        int frameIndex = ani.getFrames().indexOf(handleFramePane.getCurFrame());
        if (frameIndex > 0) {
            ani.swapFrameUp(frameIndex);
            frameTable.getSelectionModel().setSelectionInterval(frameIndex - 1,
                    frameIndex - 1);
            handleFramePane.setCurFrame(ani.getFrame(frameTable.getSelectedRow()));
            frameTable.updateUI();
        }
}//GEN-LAST:event_upFrameButtonActionPerformed

    private void cloneFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cloneFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimation() == null) {
            return;
        }
        Animation ani = data.getCurrentAnimation();
        Frame frame = null;
        if (handleFramePane.getCurFrame() != null) {
            try {
                frame = (Frame) handleFramePane.getCurFrame().clone();
            } catch (CloneNotSupportedException ex) {
                ex.printStackTrace();
            }
            ani.addFrame(frame);
            handleFramePane.setCurFrame(frame);
            frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
                    ani.getFrames().size() - 1);
            frameTable.updateUI();
        }
}//GEN-LAST:event_cloneFrameButtonActionPerformed

    private void removeFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimation() == null) {
            return;
        }
        Animation ani = data.getCurrentAnimation();
        if (frameTable.getSelectedRow() < 0 || frameTable.getSelectedRow() > ani.getFrames().size() - 1) {
            return;
        }
        if (ani.getFrames().size() == 1) {
            JOptionPane.showMessageDialog(this, "动画至少应该包含一帧！", "警告", JOptionPane.WARNING_MESSAGE);
            return;
        }
        ani.removeFrame(frameTable.getSelectedRow());
        handleFramePane.setCurFrame(ani.getFrame(0));
        if (ani.getFrames().size() > 0) {
            frameTable.getSelectionModel().setSelectionInterval(0, 0);
        } else {
            frameTable.getSelectionModel().clearSelection();
        }
        frameTable.updateUI();
}//GEN-LAST:event_removeFrameButtonActionPerformed

    private void addFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addFrameButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimation() == null) {
            return;
        }
        NewFrameDialog nad = new NewFrameDialog(this, true);
        nad.setVisible(true);
        if (nad.getFrame() != null) {
            Animation ani = data.getCurrentAnimation();
            Frame frame = nad.getFrame();
            frame.setAnimation(ani);
            frame.setDelay(ani.getFrameDelay());
            ani.addFrame(frame);
            handleFramePane.setCurFrame(frame);
            frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
                    ani.getFrames().size() - 1);
            frameTable.updateUI();
        }
//        Animation ani = data.getCurrentAnimation();
//        Frame frame = new Frame();
//        frame.setAnimation(ani);
//        ani.addFrame(frame);
//        frame.setDelay(ani.getFrameDelay());
//        handleFramePane.setCurFrame(frame);
//        frameTable.getSelectionModel().setSelectionInterval(ani.getFrames().size() - 1,
//                ani.getFrames().size() - 1);
//        frameTable.updateUI();
}//GEN-LAST:event_addFrameButtonActionPerformed

    private void moveTopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveTopButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            Frame frame = handleFramePane.getCurFrame();
            int id = frame.getTiles().indexOf(clip);
            if (id < frame.getTiles().size() - 1) {
                frame.swapClipTop(id);
                handleFramePane.setSelectedTileIndex(frame.getTiles().size() - 1);
                handleFramePane.repaint();
            }
        }
    }//GEN-LAST:event_moveTopButtonActionPerformed

    private void moveBottomButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveBottomButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            Frame frame = handleFramePane.getCurFrame();
            int id = frame.getTiles().indexOf(clip);
            if (id > 0) {
                frame.swapClipBottom(id);
                handleFramePane.setSelectedTileIndex(0);
                handleFramePane.repaint();
            }
        }
    }//GEN-LAST:event_moveBottomButtonActionPerformed

    private void hcenterButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hcenterButtonActionPerformed
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            clip.getFramePoint().x = 0;
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_hcenterButtonActionPerformed

    private void zoomSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_zoomSliderStateChanged
        // TODO add your handling code here:
        Clip clip = handleFramePane.getSelectedTile();
        if (clip != null) {
            float zoom = zoomSlider.getValue() * 2.0f / zoomSlider.getMaximum();
            clip.setZoom(zoom);
            handleFramePane.repaint();
        }
    }//GEN-LAST:event_zoomSliderStateChanged

    private void autoCutButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCutButtonActionPerformed
        // TODO add your handling code here:
        if (picturePane.getSelectedIndex() == -1) {
            return;
        }
        if (autoCutDialog == null) {
            autoCutDialog = new AutoCutDialog(this, true);
        }
        autoCutDialog.setVisible(true);
        Rectangle rect = autoCutDialog.getAutoCutRect();
        if (rect != null) {
            Picture pic = picturePane.getSelectedPicture();
            TileCutter cutter = new TileCutter(rect.width, rect.height);
            cutter.setImage(pic.getSourceImage());
            Rectangle tile = cutter.getNextRect();
            while (tile != null) {
                Clip newTile = new Clip();
                newTile.setSourcePoint(new Point(tile.x, tile.y));
                newTile.setW(tile.width);
                newTile.setH(tile.height);
                pic.addTile(newTile);
                data.getCurProject().addClip(newTile);
                tile = cutter.getNextRect();
            }
            handlePictureScrollPane.setViewportView(handlePicturePanes.get(pic));
        }
    }//GEN-LAST:event_autoCutButtonActionPerformed
    private TreePath tp;
    private DefaultMutableTreeNode selectNode = null;
    //创建根节点
    private DefaultMutableTreeNode dmtnRoot = new DefaultMutableTreeNode("动画");
    //创建树的数据模型
    private DefaultTreeModel dtm = new DefaultTreeModel(dmtnRoot);

    private void animationTreeValueChanged(javax.swing.event.TreeSelectionEvent evt) {//GEN-FIRST:event_animationTreeValueChanged
        // TODO add your handling code here:
        tp = evt.getNewLeadSelectionPath();
        if (tp != null) {
            //记录选中的节点
            selectNode = (DefaultMutableTreeNode) tp.getLastPathComponent();
            Object so = selectNode.getUserObject();
            if ((so instanceof Animation) && (so != null)) {
                Animation ani = (Animation) so;
                AppData.getInstance().setCurrentAnimationIndex(ani.getIndex());
                handleFramePane.setCurFrame(ani.getFrame(0));
                if (ani.getFrames().size() > 0) {
                    frameTable.getSelectionModel().setSelectionInterval(0, 0);
                } else {
                    frameTable.getSelectionModel().clearSelection();
                }
                frameTable.updateUI();
            }
        }
    }//GEN-LAST:event_animationTreeValueChanged

    private void animationTreeTreeCollapsed(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_animationTreeTreeCollapsed
        // TODO add your handling code here:
        tp = evt.getPath();
    }//GEN-LAST:event_animationTreeTreeCollapsed

    private void animationTreeTreeExpanded(javax.swing.event.TreeExpansionEvent evt) {//GEN-FIRST:event_animationTreeTreeExpanded
        // TODO add your handling code here:
        tp = evt.getPath();
    }//GEN-LAST:event_animationTreeTreeExpanded

    private void editAniButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editAniButtonActionPerformed
        // TODO add your handling code here:
        if (selectNode != null && selectNode.getUserObject() instanceof Animation) {
            EditAnimationDialog ead = new EditAnimationDialog(this, true);
            ead.setVisible(true);
            animationTree.updateUI();
            handleFramePane.updateUI();
        }
    }//GEN-LAST:event_editAniButtonActionPerformed

    private void addActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addActionButtonActionPerformed
        // TODO add your handling code here:
        NewActionDialog nad = new NewActionDialog(this, true);
        nad.setVisible(true);
        if (nad.getAction() != null) {
            Animation ani = data.getCurrentAnimation();
            Action action = nad.getAction();
            action.setAnimation(ani);
            ani.addAction(action);
            actionTable.getSelectionModel().setSelectionInterval(ani.getActions().size() - 1,
                    ani.getActions().size() - 1);
            actionTable.updateUI();
        }
    }//GEN-LAST:event_addActionButtonActionPerformed

    private void removeActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeActionButtonActionPerformed
        // TODO add your handling code here:
        if (data.getCurrentAnimation() == null) {
            return;
        }
        Animation ani = data.getCurrentAnimation();
        if (actionTable.getSelectedRow() < 0 || actionTable.getSelectedRow() > ani.getActions().size() - 1) {
            return;
        }
        ani.removeAction(actionTable.getSelectedRow());
        if (ani.getActions().size() > 0) {
            actionTable.getSelectionModel().setSelectionInterval(0, 0);
        } else {
            actionTable.getSelectionModel().clearSelection();
        }
        actionTable.updateUI();
    }//GEN-LAST:event_removeActionButtonActionPerformed

    private void editActionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionButtonActionPerformed
        // TODO add your handling code here:
        if (actionTable.getSelectedRow() == -1) {
            return;
        }
        EditActionDialog ead = new EditActionDialog(this, true);
        ead.setVisible(true);
    }//GEN-LAST:event_editActionButtonActionPerformed

    private void editFrameButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editFrameButtonActionPerformed
        // TODO add your handling code here:
        if (frameTable.getSelectedRow() == -1) {
            return;
        }
        EditFrameDialog ead = new EditFrameDialog(this, true);
        ead.setVisible(true);
    }//GEN-LAST:event_editFrameButtonActionPerformed
    private AutoCutDialog autoCutDialog;
    private FrameTableModel ftm;
    private ActionTableModel atm;
    private ChoosePicturePane picturePane;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable actionTable;
    private javax.swing.JButton addActionButton;
    private javax.swing.JButton addFrameButton;
    private javax.swing.JButton addImageButton;
    private javax.swing.JSlider alphaSlider;
    public javax.swing.JTree animationTree;
    private javax.swing.JButton autoCutButton;
    private javax.swing.JLabel bottomLabel;
    private javax.swing.JButton cloneFrameButton;
    private javax.swing.JButton downAlignButton;
    private javax.swing.JButton downFrameButton;
    private javax.swing.JButton editActionButton;
    private javax.swing.JButton editAniButton;
    private javax.swing.JButton editFrameButton;
    private javax.swing.JButton flipHorizontalButton;
    private javax.swing.JButton flipVerticalButton;
    private javax.swing.JTable frameTable;
    private com.soyomaker.widget.HandleFramePane handleFramePane;
    public javax.swing.JScrollPane handlePictureScrollPane;
    private javax.swing.JButton hcenterButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane5;
    private javax.swing.JSplitPane jSplitPane6;
    private javax.swing.JSplitPane jSplitPane7;
    private javax.swing.JSplitPane jSplitPane9;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar4;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JToolBar jToolBar6;
    private javax.swing.JToolBar jToolBar7;
    private javax.swing.JButton leftAlignButton;
    private javax.swing.JButton leftRotate90Button;
    private javax.swing.JCheckBox loopCheckBox;
    private javax.swing.JButton moveBottomButton;
    private javax.swing.JButton moveDownButton;
    private javax.swing.JButton moveTopButton;
    private javax.swing.JButton moveUpButton;
    private javax.swing.JButton newAniButton;
    private javax.swing.JButton normalPictureButton;
    private javax.swing.JButton playAnimationButton;
    private javax.swing.JButton removeActionButton;
    private javax.swing.JButton removeAniButton;
    private javax.swing.JButton removeFrameButton;
    private javax.swing.JButton removeImageButton;
    private javax.swing.JButton rightAlignButton;
    private javax.swing.JButton rightRotate90Button;
    public javax.swing.JScrollPane showPictureScrollPane;
    private javax.swing.JTabbedPane spriteTabbedPane;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JButton upAlignButton;
    private javax.swing.JButton upFrameButton;
    private javax.swing.JButton vcenterButton;
    private javax.swing.JButton zoomInPictureButton;
    private javax.swing.JButton zoomOutPictureButton;
    private javax.swing.JSlider zoomSlider;
    // End of variables declaration//GEN-END:variables

    public void animationAdded(ProjectAnimationChangedEvent e, final Animation ani) {
    }

    public void pictureAdded(ProjectAnimationChangedEvent e, final Picture pic) {

        ShowPicturePane spp = new ShowPicturePane(SpriteEditorDialog.this, pic);
        JScrollPane paletteScrollPane = new JScrollPane(spp,
                JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED,
                JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
        aspp.addPanel(pic.getSourceImageFile(), paletteScrollPane);
        //tabbedPane.add(pic.getSourceImageFile(), paletteScrollPane);
        showPictureScrollPanes.put(pic, paletteScrollPane);
        HandlePicturePane hpp = new HandlePicturePane(SpriteEditorDialog.this, pic);
        DragSource dragSource = DragSource.getDefaultDragSource();
        dragSource.createDefaultDragGestureRecognizer(spp,
                DnDConstants.ACTION_COPY_OR_MOVE, spp);
        DropTarget dropTarget = new DropTarget(handleFramePane, DnDConstants.ACTION_COPY, handleFramePane);
        handlePicturePanes.put(pic, hpp);
        picturePane.setSelectedIndex(AppData.getInstance().getCurProject().getPictures().size() - 1);
        handlePictureScrollPane.setViewportView(hpp);
    }

    public void animationRemoved(ProjectAnimationChangedEvent e, int index) {
    }

    public void pictureRemoved(ProjectAnimationChangedEvent e, int index) {
        //tabbedPane.remove(showPictureScrollPanes.get(picturePane.getSelectedPicture()));
        handlePicturePanes.remove(picturePane.getSelectedPicture());
        aspp.removePanel(showPictureScrollPanes.get(picturePane.getSelectedPicture()));
        showPictureScrollPanes.remove(picturePane.getSelectedPicture());
        picturePane.setSelectedIndex(-1);
        handlePictureScrollPane.setViewportView(null);
    }

    private void enableClip(boolean enable) {
        alphaSlider.setEnabled(enable);
        zoomSlider.setEnabled(enable);
        hcenterButton.setEnabled(enable);
        vcenterButton.setEnabled(enable);
        rightAlignButton.setEnabled(enable);
        upAlignButton.setEnabled(enable);
        leftAlignButton.setEnabled(enable);
        downAlignButton.setEnabled(enable);
        leftRotate90Button.setEnabled(enable);
        rightRotate90Button.setEnabled(enable);
        flipHorizontalButton.setEnabled(enable);
        flipVerticalButton.setEnabled(enable);
        moveUpButton.setEnabled(enable);
        moveDownButton.setEnabled(enable);
        moveTopButton.setEnabled(enable);
        moveBottomButton.setEnabled(enable);
    }

    /**
     *
     * @param clip
     */
    public void clipSelected(Clip clip) {
        if (clip == null) {
            enableClip(false);
        } else {
            enableClip(true);
            zoomSlider.setValue((int) (clip.getZoom() * zoomSlider.getMaximum() / 2));
            alphaSlider.setValue(clip.getTransparency());
        }
    }
}

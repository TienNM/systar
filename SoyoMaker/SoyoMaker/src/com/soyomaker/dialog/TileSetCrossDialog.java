/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * TileSetCrossDialog.java
 *
 * Created on 2011-5-31, 23:37:26
 */
package com.soyomaker.dialog;

import com.soyomaker.AppData;
import com.soyomaker.model.map.Pass;
import java.awt.AlphaComposite;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Image;
import java.awt.Rectangle;
import java.awt.RenderingHints;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import org.apache.log4j.Logger;

/**
 *
 * @author Administrator
 */
public class TileSetCrossDialog extends javax.swing.JDialog {

    /** Creates new form TileSetCrossDialog
     * @param parent
     * @param modal  
     */
    public TileSetCrossDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        init();
        initComponents();
        initialize();
    }

    private void initialize() {
        setLocationRelativeTo(null);
    }
    private DefaultListModel listModel;
    private ArrayList<Pass> images = new ArrayList<Pass>();

    private void init() {
        File file = new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar + "image" + File.separatorChar + "tileset");
        listModel = new DefaultListModel();
        if (file != null) {
            File[] files = file.listFiles();
            try {
                for (int i = 0, n = files.length; i < n; i++) {
//                    System.out.println(files[i].getName());
                    if (files[i].getName().toLowerCase().endsWith(".png")) {
                        listModel.addElement(files[i].getName());
                        Pass pic = new Pass();
                        Pass initPic;
                        initPic = initCrossFile(files[i].getName(), bound);
                        if (initPic == null) {
                            pic.imgFileName = files[i].getName();
                            pic.img = ImageIO.read(new File(files[i].getPath()));
                            pic.collides = new boolean[pic.img.getWidth(null) / bound.width][pic.img.getHeight(null) / bound.height];
                        } else {
                            pic = initPic;
                        }
                        images.add(pic);
                    }
                }
            } catch (IOException ex) {
                Logger.getLogger(this.getClass().getName()).error("tileset img load error！ ", ex);
//                Log.getLogger(TileSetCrossDialog.class).error("tileset img load error", ex);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tileSetList = new javax.swing.JList();
        jScrollPane2 = new javax.swing.JScrollPane();
        tileSetPanel = new javax.swing.JPanel(){
            public void paint(Graphics g){
                paintTileSetPane(g);
            }
            public Dimension getPreferredSize(){
                if(tileSetList.getSelectedIndex()!=-1){
                    return new Dimension(images.get(tileSetList.getSelectedIndex()).img.getWidth(null),images.get(tileSetList.getSelectedIndex()).img.getHeight(null));
                }
                return new Dimension(0,0);
            }
        };
        okButton = new javax.swing.JButton();
        cancleButton = new javax.swing.JButton();
        applyButton = new javax.swing.JButton();
        setTileButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance().getContext().getResourceMap(TileSetCrossDialog.class);
        setTitle(resourceMap.getString("title")); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tileSetList.setModel(listModel);
        tileSetList.setName("tileSetList"); // NOI18N
        tileSetList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                tileSetListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(tileSetList);

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        tileSetPanel.setName("tileSetPanel"); // NOI18N
        tileSetPanel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tileSetPanelMousePressed(evt);
            }
        });

        javax.swing.GroupLayout tileSetPanelLayout = new javax.swing.GroupLayout(tileSetPanel);
        tileSetPanel.setLayout(tileSetPanelLayout);
        tileSetPanelLayout.setHorizontalGroup(
            tileSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 256, Short.MAX_VALUE)
        );
        tileSetPanelLayout.setVerticalGroup(
            tileSetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 434, Short.MAX_VALUE)
        );

        jScrollPane2.setViewportView(tileSetPanel);

        okButton.setText("确定");
        okButton.setName("okButton"); // NOI18N
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancleButton.setText("取消");
        cancleButton.setName("cancleButton"); // NOI18N
        cancleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleButtonActionPerformed(evt);
            }
        });

        applyButton.setText("应用");
        applyButton.setName("applyButton"); // NOI18N
        applyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyButtonActionPerformed(evt);
            }
        });

        setTileButton.setText("重新设置单元格大小");
        setTileButton.setName("setTileButton"); // NOI18N
        setTileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                setTileButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(setTileButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 182, Short.MAX_VALUE)
                .addComponent(okButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cancleButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(applyButton)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE))
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(applyButton)
                    .addComponent(cancleButton)
                    .addComponent(okButton)
                    .addComponent(setTileButton))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        // TODO add your handling code here:
        if (tileSetList.getSelectedIndex() != -1) {
            Pass pic = images.get(tileSetList.getSelectedIndex());
            try {
                saveCrossFile(pic, pic.imgFileName);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleButtonActionPerformed
        // TODO add your handling code here:
        dispose();
    }//GEN-LAST:event_cancleButtonActionPerformed

    private void applyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyButtonActionPerformed
        // TODO add your handling code here:
        if (tileSetList.getSelectedIndex() != -1) {
            Pass pic = images.get(tileSetList.getSelectedIndex());
            try {
                saveCrossFile(pic, pic.imgFileName);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }//GEN-LAST:event_applyButtonActionPerformed

    private void tileSetListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_tileSetListValueChanged
        // TODO add your handling code here:
        tileSetPanel.updateUI();
    }//GEN-LAST:event_tileSetListValueChanged
    private void paintTileSetPane(Graphics g) {
        Graphics2D g2d = (Graphics2D) g.create();
        g2d.setColor(Color.LIGHT_GRAY);
        g2d.fillRect(0, 0, tileSetPanel.getWidth(), tileSetPanel.getHeight());
        if (tileSetList.getSelectedIndex() != -1) {
            Pass pic = images.get(tileSetList.getSelectedIndex());
            Image img = pic.img;
            g2d.setColor(Color.WHITE);
            g2d.fillRect(0, 0, img.getWidth(null), img.getHeight(null));
            g2d.drawImage(img, 0, 0, null);
            g2d.setColor(Color.DARK_GRAY);
            g2d.setComposite(AlphaComposite.getInstance(
                    AlphaComposite.SRC_ATOP, 0.5f));
            g2d.setStroke(new BasicStroke(2.0F, BasicStroke.CAP_BUTT,
                    BasicStroke.JOIN_MITER));
            for (int i = 0; i < img.getWidth(null) / bound.width; i++) {
                g2d.drawLine(i * bound.width, 0, i * bound.width, img.getHeight(null));
            }
            for (int j = 0; j < img.getHeight(null) / bound.height; j++) {
                g2d.drawLine(0, j * bound.height, img.getWidth(null), j * bound.height);
            }
            g2d.setColor(Color.BLACK.brighter());
            g2d.setComposite(AlphaComposite.getInstance(
                    AlphaComposite.SRC_ATOP, 1f));
            g2d.setRenderingHint(
                    RenderingHints.KEY_ANTIALIASING,
                    RenderingHints.VALUE_ANTIALIAS_ON);
            for (int i = 0; i < img.getWidth(null) / bound.width; i++) {
                for (int j = 0; j < img.getHeight(null) / bound.height; j++) {
                    if (pic.collides[i][j]) {
                        g2d.drawOval(i * bound.width + 1, j * bound.height + 1, bound.width - 3, bound.height - 3);
                        g2d.drawLine(i * bound.width + 1, j * bound.height + bound.height / 2,
                                i * bound.width + bound.width - 2, j * bound.height + bound.height / 2);
                    }
                }
            }
        }
    }
    private void tileSetPanelMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tileSetPanelMousePressed
        // TODO add your handling code here:
        if (tileSetList.getSelectedIndex() != -1) {
            Pass pic = images.get(tileSetList.getSelectedIndex());
            if (evt.getX() <= pic.img.getWidth(null) && evt.getY() <= pic.img.getHeight(null)) {
                pic.collides[evt.getX() / bound.width][evt.getY() / bound.height] = !pic.collides[evt.getX() / bound.width][evt.getY() / bound.height];
            }
        }
        tileSetPanel.repaint();
    }//GEN-LAST:event_tileSetPanelMousePressed
    private SetTileSizeDialog stsd;
    private void setTileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_setTileButtonActionPerformed
        // TODO add your handling code here:
        if (stsd == null) {
            stsd = new SetTileSizeDialog(this, true);
        }
        stsd.setVisible(true);
    }//GEN-LAST:event_setTileButtonActionPerformed
    private Rectangle bound = new Rectangle(32, 32);//单元格的大小 默认32*32
    //初始化通行度设置

    /**
     * 
     * @param filename
     * @param rec
     * @return
     */
    public Pass initCrossFile(String filename, Rectangle rec) {
        if (!new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar
                + "softdata" + File.separatorChar + "tileset" + File.separatorChar + filename + rec.width + "x" + rec.height).exists()) {
            return null;
        }
        try {
            DataInputStream dis = null;
            FileInputStream fis = null;
            fis = new FileInputStream(AppData.getInstance().getCurProject().getPath() + File.separatorChar
                    + "softdata" + File.separatorChar + "tileset" + File.separatorChar + filename + rec.width + "x" + rec.height);
            dis = new DataInputStream(fis);
            Pass pic = new Pass();
            pic.imgFileName = dis.readUTF();
            pic.img = ImageIO.read(new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar
                    + "image" + File.separatorChar + "tileset" + File.separatorChar + pic.imgFileName));
            int w = dis.readInt();
            int h = dis.readInt();
            pic.collides = new boolean[pic.img.getWidth(null) / w][pic.img.getHeight(null) / h];
            for (int i = 0; i < pic.collides.length; i++) {
                for (int j = 0; j < pic.collides[0].length; j++) {
                    pic.collides[i][j] = dis.readBoolean();
                }
            }
            return pic;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return null;
    }
    //保存通行度

    private void saveCrossFile(Pass pic, String filename) throws Exception {
        FileOutputStream fos = null;
        DataOutputStream dos = null;
        File dir = new File(AppData.getInstance().getCurProject().getPath() + File.separatorChar
                + "softdata" + File.separatorChar + "tileset");
        if (!dir.exists()) {
            dir.mkdirs();
        }
        File file = new File(dir.getPath() + File.separatorChar + filename + bound.width + "x" + bound.height);
        fos = new FileOutputStream(file);
        dos = new DataOutputStream(fos);
        //写入图片文件名
        dos.writeUTF(pic.imgFileName);
        //写入当前单元格宽度
        dos.writeInt(bound.width);
        //写入当前单元格高度
        dos.writeInt(bound.height);
        //写入通行度设置
        for (int i = 0; i < pic.collides.length; i++) {
            for (int j = 0; j < pic.collides[0].length; j++) {
                dos.writeBoolean(pic.collides[i][j]);
            }
        }
        dos.close();
        fos.close();
    }

    /**
     * 
     * @return
     */
    public Rectangle getBound() {
        return bound;
    }

    /**
     * 
     * @param r
     */
    public void setBound(Rectangle r) {
        ArrayList<Pass> imgs = new ArrayList<Pass>();
        for (int i = 0; i < images.size(); i++) {
            Pass pic = images.get(i);
            try {
                saveCrossFile(pic, pic.imgFileName);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        bound = r;
        for (int i = 0; i < images.size(); i++) {
            Pass pic = new Pass();
            pic.imgFileName = images.get(i).imgFileName;
            Pass initPic;
            initPic = initCrossFile(pic.imgFileName, bound);
            if (initPic == null) {
                pic.img = images.get(i).img;
                pic.collides = new boolean[pic.img.getWidth(null) / bound.width][pic.img.getHeight(null) / bound.height];
            } else {
                pic = initPic;
            }
            imgs.add(pic);
        }
        images.clear();
        images = imgs;
        tileSetPanel.repaint();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                TileSetCrossDialog dialog = new TileSetCrossDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton applyButton;
    private javax.swing.JButton cancleButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton okButton;
    private javax.swing.JButton setTileButton;
    private javax.swing.JList tileSetList;
    private javax.swing.JPanel tileSetPanel;
    // End of variables declaration//GEN-END:variables
}
